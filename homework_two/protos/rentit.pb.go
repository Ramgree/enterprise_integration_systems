// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: rentit.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantId               int32   `protobuf:"varint,1,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`
	PlantTypeName         string  `protobuf:"bytes,2,opt,name=plant_type_name,json=plantTypeName,proto3" json:"plant_type_name,omitempty"`
	PlantDailyRentalPrice float32 `protobuf:"fixed32,3,opt,name=plant_daily_rental_price,json=plantDailyRentalPrice,proto3" json:"plant_daily_rental_price,omitempty"`
	PlantName             string  `protobuf:"bytes,4,opt,name=plant_name,json=plantName,proto3" json:"plant_name,omitempty"`
}

func (x *Plant) Reset() {
	*x = Plant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rentit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plant) ProtoMessage() {}

func (x *Plant) ProtoReflect() protoreflect.Message {
	mi := &file_rentit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plant.ProtoReflect.Descriptor instead.
func (*Plant) Descriptor() ([]byte, []int) {
	return file_rentit_proto_rawDescGZIP(), []int{0}
}

func (x *Plant) GetPlantId() int32 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *Plant) GetPlantTypeName() string {
	if x != nil {
		return x.PlantTypeName
	}
	return ""
}

func (x *Plant) GetPlantDailyRentalPrice() float32 {
	if x != nil {
		return x.PlantDailyRentalPrice
	}
	return 0
}

func (x *Plant) GetPlantName() string {
	if x != nil {
		return x.PlantName
	}
	return ""
}

type Plants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plants []*Plant `protobuf:"bytes,1,rep,name=plants,proto3" json:"plants,omitempty"`
}

func (x *Plants) Reset() {
	*x = Plants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rentit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plants) ProtoMessage() {}

func (x *Plants) ProtoReflect() protoreflect.Message {
	mi := &file_rentit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plants.ProtoReflect.Descriptor instead.
func (*Plants) Descriptor() ([]byte, []int) {
	return file_rentit_proto_rawDescGZIP(), []int{1}
}

func (x *Plants) GetPlants() []*Plant {
	if x != nil {
		return x.Plants
	}
	return nil
}

type EstimateRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartDate *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *EstimateRentalRequest) Reset() {
	*x = EstimateRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rentit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateRentalRequest) ProtoMessage() {}

func (x *EstimateRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rentit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateRentalRequest.ProtoReflect.Descriptor instead.
func (*EstimateRentalRequest) Descriptor() ([]byte, []int) {
	return file_rentit_proto_rawDescGZIP(), []int{2}
}

func (x *EstimateRentalRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EstimateRentalRequest) GetStartDate() *timestamp.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *EstimateRentalRequest) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type EstimateRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceEstimation float32 `protobuf:"fixed32,1,opt,name=price_estimation,json=priceEstimation,proto3" json:"price_estimation,omitempty"`
}

func (x *EstimateRentalResponse) Reset() {
	*x = EstimateRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rentit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateRentalResponse) ProtoMessage() {}

func (x *EstimateRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rentit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateRentalResponse.ProtoReflect.Descriptor instead.
func (*EstimateRentalResponse) Descriptor() ([]byte, []int) {
	return file_rentit_proto_rawDescGZIP(), []int{3}
}

func (x *EstimateRentalResponse) GetPriceEstimation() float32 {
	if x != nil {
		return x.PriceEstimation
	}
	return 0
}

type AvailabilityCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartDate *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *AvailabilityCheckRequest) Reset() {
	*x = AvailabilityCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rentit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityCheckRequest) ProtoMessage() {}

func (x *AvailabilityCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rentit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityCheckRequest.ProtoReflect.Descriptor instead.
func (*AvailabilityCheckRequest) Descriptor() ([]byte, []int) {
	return file_rentit_proto_rawDescGZIP(), []int{4}
}

func (x *AvailabilityCheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AvailabilityCheckRequest) GetStartDate() *timestamp.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *AvailabilityCheckRequest) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type AvailabilityCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *AvailabilityCheckResponse) Reset() {
	*x = AvailabilityCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rentit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityCheckResponse) ProtoMessage() {}

func (x *AvailabilityCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rentit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityCheckResponse.ProtoReflect.Descriptor instead.
func (*AvailabilityCheckResponse) Descriptor() ([]byte, []int) {
	return file_rentit_proto_rawDescGZIP(), []int{5}
}

func (x *AvailabilityCheckResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

var File_rentit_proto protoreflect.FileDescriptor

var file_rentit_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x06, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x16, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa0, 0x01, 0x0a, 0x18, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x39, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x32, 0xf9, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x39, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x11, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x72, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_rentit_proto_rawDescOnce sync.Once
	file_rentit_proto_rawDescData = file_rentit_proto_rawDesc
)

func file_rentit_proto_rawDescGZIP() []byte {
	file_rentit_proto_rawDescOnce.Do(func() {
		file_rentit_proto_rawDescData = protoimpl.X.CompressGZIP(file_rentit_proto_rawDescData)
	})
	return file_rentit_proto_rawDescData
}

var file_rentit_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_rentit_proto_goTypes = []interface{}{
	(*Plant)(nil),                     // 0: protos.Plant
	(*Plants)(nil),                    // 1: protos.Plants
	(*EstimateRentalRequest)(nil),     // 2: protos.EstimateRentalRequest
	(*EstimateRentalResponse)(nil),    // 3: protos.EstimateRentalResponse
	(*AvailabilityCheckRequest)(nil),  // 4: protos.AvailabilityCheckRequest
	(*AvailabilityCheckResponse)(nil), // 5: protos.AvailabilityCheckResponse
	(*timestamp.Timestamp)(nil),       // 6: google.protobuf.Timestamp
	(*empty.Empty)(nil),               // 7: google.protobuf.Empty
}
var file_rentit_proto_depIdxs = []int32{
	0, // 0: protos.Plants.plants:type_name -> protos.Plant
	6, // 1: protos.EstimateRentalRequest.start_date:type_name -> google.protobuf.Timestamp
	6, // 2: protos.EstimateRentalRequest.end_date:type_name -> google.protobuf.Timestamp
	6, // 3: protos.AvailabilityCheckRequest.start_date:type_name -> google.protobuf.Timestamp
	6, // 4: protos.AvailabilityCheckRequest.end_date:type_name -> google.protobuf.Timestamp
	7, // 5: protos.RentitService.GetAllPlants:input_type -> google.protobuf.Empty
	2, // 6: protos.RentitService.EstimateRental:input_type -> protos.EstimateRentalRequest
	4, // 7: protos.RentitService.AvailabilityCheck:input_type -> protos.AvailabilityCheckRequest
	0, // 8: protos.RentitService.GetAllPlants:output_type -> protos.Plant
	3, // 9: protos.RentitService.EstimateRental:output_type -> protos.EstimateRentalResponse
	5, // 10: protos.RentitService.AvailabilityCheck:output_type -> protos.AvailabilityCheckResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_rentit_proto_init() }
func file_rentit_proto_init() {
	if File_rentit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rentit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rentit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rentit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rentit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rentit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rentit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rentit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rentit_proto_goTypes,
		DependencyIndexes: file_rentit_proto_depIdxs,
		MessageInfos:      file_rentit_proto_msgTypes,
	}.Build()
	File_rentit_proto = out.File
	file_rentit_proto_rawDesc = nil
	file_rentit_proto_goTypes = nil
	file_rentit_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RentitServiceClient is the client API for RentitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RentitServiceClient interface {
	GetAllPlants(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (RentitService_GetAllPlantsClient, error)
	EstimateRental(ctx context.Context, in *EstimateRentalRequest, opts ...grpc.CallOption) (*EstimateRentalResponse, error)
	AvailabilityCheck(ctx context.Context, in *AvailabilityCheckRequest, opts ...grpc.CallOption) (*AvailabilityCheckResponse, error)
}

type rentitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRentitServiceClient(cc grpc.ClientConnInterface) RentitServiceClient {
	return &rentitServiceClient{cc}
}

func (c *rentitServiceClient) GetAllPlants(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (RentitService_GetAllPlantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RentitService_serviceDesc.Streams[0], "/protos.RentitService/GetAllPlants", opts...)
	if err != nil {
		return nil, err
	}
	x := &rentitServiceGetAllPlantsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RentitService_GetAllPlantsClient interface {
	Recv() (*Plant, error)
	grpc.ClientStream
}

type rentitServiceGetAllPlantsClient struct {
	grpc.ClientStream
}

func (x *rentitServiceGetAllPlantsClient) Recv() (*Plant, error) {
	m := new(Plant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rentitServiceClient) EstimateRental(ctx context.Context, in *EstimateRentalRequest, opts ...grpc.CallOption) (*EstimateRentalResponse, error) {
	out := new(EstimateRentalResponse)
	err := c.cc.Invoke(ctx, "/protos.RentitService/EstimateRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentitServiceClient) AvailabilityCheck(ctx context.Context, in *AvailabilityCheckRequest, opts ...grpc.CallOption) (*AvailabilityCheckResponse, error) {
	out := new(AvailabilityCheckResponse)
	err := c.cc.Invoke(ctx, "/protos.RentitService/AvailabilityCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentitServiceServer is the server API for RentitService service.
type RentitServiceServer interface {
	GetAllPlants(*empty.Empty, RentitService_GetAllPlantsServer) error
	EstimateRental(context.Context, *EstimateRentalRequest) (*EstimateRentalResponse, error)
	AvailabilityCheck(context.Context, *AvailabilityCheckRequest) (*AvailabilityCheckResponse, error)
}

// UnimplementedRentitServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRentitServiceServer struct {
}

func (*UnimplementedRentitServiceServer) GetAllPlants(*empty.Empty, RentitService_GetAllPlantsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllPlants not implemented")
}
func (*UnimplementedRentitServiceServer) EstimateRental(context.Context, *EstimateRentalRequest) (*EstimateRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRental not implemented")
}
func (*UnimplementedRentitServiceServer) AvailabilityCheck(context.Context, *AvailabilityCheckRequest) (*AvailabilityCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailabilityCheck not implemented")
}

func RegisterRentitServiceServer(s *grpc.Server, srv RentitServiceServer) {
	s.RegisterService(&_RentitService_serviceDesc, srv)
}

func _RentitService_GetAllPlants_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RentitServiceServer).GetAllPlants(m, &rentitServiceGetAllPlantsServer{stream})
}

type RentitService_GetAllPlantsServer interface {
	Send(*Plant) error
	grpc.ServerStream
}

type rentitServiceGetAllPlantsServer struct {
	grpc.ServerStream
}

func (x *rentitServiceGetAllPlantsServer) Send(m *Plant) error {
	return x.ServerStream.SendMsg(m)
}

func _RentitService_EstimateRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentitServiceServer).EstimateRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RentitService/EstimateRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentitServiceServer).EstimateRental(ctx, req.(*EstimateRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentitService_AvailabilityCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailabilityCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentitServiceServer).AvailabilityCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.RentitService/AvailabilityCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentitServiceServer).AvailabilityCheck(ctx, req.(*AvailabilityCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RentitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RentitService",
	HandlerType: (*RentitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateRental",
			Handler:    _RentitService_EstimateRental_Handler,
		},
		{
			MethodName: "AvailabilityCheck",
			Handler:    _RentitService_AvailabilityCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllPlants",
			Handler:       _RentitService_GetAllPlants_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rentit.proto",
}
